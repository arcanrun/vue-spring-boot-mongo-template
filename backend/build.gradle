apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'com.diffplug.spotless'

ext {
	springDocVersion = '2.7.0'
	jjwtVersion = '0.12.6'
	mapstructVersion = '1.6.3'
	projectDirectory = rootDir.absolutePath
}

springBoot {
	buildInfo()
}

processResources {
	// Inject the ROOT_DIR property into application.yml
	filesMatching("application-local.yml") {
		expand(ROOT_DIR: projectDirectory)
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

compileJava {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${springDocVersion}"
	implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"

	runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

	compileOnly 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mongodb'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	// If your project is not currently enforcing formatting, then it can be a noisy transition. Having a giant commit
	// where every single file gets changed makes the history harder to read. To address this, you can use the ratchet feature:
//	ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'
		targetExclude 'src/main/resources/**'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// don't need to set target, it is inferred from java

		importOrder()
		removeUnusedImports()

		googleJavaFormat()
		formatAnnotations()
	}
}


tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('build') {
	dependsOn 'spotlessApply'
	dependsOn 'spotlessCheck'
}

tasks.named('test') {
	dependsOn 'spotlessApply'
	dependsOn 'spotlessCheck'
	useJUnitPlatform()
}

tasks.named('bootJar') {
	dependsOn 'spotlessApply'
	dependsOn 'spotlessCheck'
}

tasks.named('compileJava') {
	dependsOn 'spotlessApply'
	dependsOn 'spotlessCheck'
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs = [
			'-Amapstruct.defaultComponentModel=spring',
			'-parameters'
	]
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.5
			}
		}
	}
}
